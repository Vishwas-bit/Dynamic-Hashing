// Program to manage bank functions using the concept of dynamic hashing
#include <bits/stdc++.h>

int admin_id=1234, admin_pin=5678, num, overflow_flag=0;
using namespace std;
struct account {
        int key, balance;
        char first_name[20], last_name[20], phone[10], pin[6];
    }tt;

class Bucket{
	vector <account> values;
	Bucket* overflow;
	int size;
	public:
	Bucket(int size){
		this->size = size;
		overflow = NULL;
	}
	void insert(int key);
	void insert_back(int key);
	void copy(vector <account> &temp);
	int search(int key);
	void display();
	int display_balance(int key);
	int del(int key);
	bool isEmpty();
	bool isOverflow();
	void store_into_files(int i);
	int deposit(int key, int amount);
	int withdraw(int key, int amount);
	int modify(int key);
	bool authenticate_user(int acc_no, char* pin);
	bool find_key(int key);
};

bool Bucket :: isEmpty(){
    return (values.size() == 0);
}

bool Bucket :: isOverflow(){
   return (overflow != NULL);
}

int Bucket :: del(int key){
	for(int i = 0; i < values.size(); i++){
		if (values[i].key == key){
			values.erase(values.begin() + i);
			if (overflow){
				values.push_back(overflow->values[0]);
				int status = overflow->del(overflow->values[0].key);
				if (overflow->isEmpty()){
					delete(overflow);
					overflow = NULL;
				}

			}
			return 1;
		}
	}
	if (overflow){
		int status = overflow->del(key);
		if (overflow->isEmpty()){
			delete(overflow);
			overflow = NULL;
		}
		return status;
	}
	else
		return 0;
}

void Bucket :: display(){
    cout <<"Account Number\t | First Name\t | Last Name\t | Phone\t | \tPin\t | Balance\t (in ₹)"<< endl; //6
	for(int i = 0; i < values.size(); i++)
	
		{cout <<"\t\t"<< values[i].key << "\t\t" << values[i].first_name << "\t\t" << values[i].last_name <<"\t\t"<< values[i].phone << "\t\t" << values[i].pin << "\t\t" << values[i].balance<< " "<< endl;
		    
		}
	if (overflow)
		overflow->display();
	else
		cout << endl;
}

int Bucket :: display_balance(int key){
    
	for(int i = 0; i < values.size(); i++)
		if (values[i].key == key)
			{   cout<<"\tYour balance amount is: ₹ "<<values[i].balance<<endl; 
			    return 1;}
	else if (overflow)
		return overflow->display_balance(key);
    return 0;
}


void Bucket :: store_into_files(int bi){
    fstream f1;
    string file_no=to_string(bi);
    if(overflow_flag==1)
    f1.open((file_no+".txt"),std::ios::out | std::ios::app);
    else
    f1.open((file_no+".txt"),ios::out);
    for(int i = 0; i < values.size(); i++)
		{
	    f1<<values[i].key<<"|"<<values[i].first_name<<"|"<<values[i].last_name
	    <<"|"<<values[i].phone<<"|"<<values[i].pin<<"|"<<values[i].balance<<"\n";}
		
		f1.close();
	if (overflow){
	    overflow_flag=1;
		overflow->store_into_files(bi);
		overflow_flag--;
	}
	
}

void Bucket :: insert_back(int key){
    
	if (values.size() < size)
	{   
		values.push_back(tt); return;
	    
	}
	else{
		if (overflow == NULL)
			overflow = new Bucket(size);
		overflow->insert_back(key);
	}

}

void Bucket :: insert(int key){
    
	if (values.size() < size)
	{   cout<<"\n\tEnter First_name: ";
        cin>>tt.first_name;
        cout<<"\n\tEnter Last_name: ";
        cin>>tt.last_name;
        cout<<"\n\tEnter Phone Number: ";
        cin>>tt.phone;
        cout<<"\n\tEnter your pin: ";
        cin>>tt.pin;
        cout<<"\n\tEnter your initial deposit (in ₹): ";
        cin>>tt.balance;
        tt.key=key;
                        
		values.push_back(tt); return;
	    
	}
	else{
		if (overflow == NULL)
			overflow = new Bucket(size);
		overflow->insert(key);
		
	}

}

void Bucket :: copy(vector <account> &temp){
	for(int i = 0; i < values.size(); i++)
		temp.push_back(values[i]);
	values.clear();
	if (overflow){
		overflow->copy(temp);
		delete(overflow);
		overflow = NULL;
	}
}

int Bucket :: search(int key){
	for(int i = 0; i < values.size(); i++){
		if (values[i].key == key)
			{   cout <<"   Account Number\t | First Name\t | Last Name\t | Phone\t | \tPin\t | Balance\t (in ₹)"<< endl; 
			    cout <<"\t\t"<< values[i].key << "\t\t" << values[i].first_name << "\t\t" << values[i].last_name<< "\t"
		    << values[i].phone << "\t\t" << values[i].pin << "\t\t" << values[i].balance<< " \n"<< endl;
			    return 1;}}
	if (overflow)
		return overflow->search(key);
    return 0;
}

bool Bucket :: authenticate_user(int acc_no, char* pin){
   for(int i = 0; i < values.size(); i++)
		if (values[i].key == acc_no && strcmp(pin, values[i].pin)==0)
			return true;
	else if (overflow)
		return overflow->authenticate_user(acc_no, pin);
    return false;
}

bool Bucket :: find_key(int key){
   for(int i = 0; i < values.size(); i++)
		if (values[i].key==key)
			return true;
	else if (overflow)
		return overflow->find_key(key);
    return false;
}

int Bucket :: modify(int key){
	for(int i = 0; i < values.size(); i++)
		if (values[i].key == key)
			{   cout<<"\tEnter first name: ";
			    cin>>values[i].first_name;
			    cout<<"\n\tEnter last name: ";
			    cin>>values[i].last_name;
			    cout<<"\n\tEnter phone number: ";
			    cin>>values[i].phone;
			    cout<<"\n\tUpdation successful!"<<endl;
			    return 1;
			}
	else if (overflow)
		return overflow->modify(key);
    return 0;
}

int Bucket :: deposit(int key, int amount){
	for(int i = 0; i < values.size(); i++)
		if (values[i].key == key)
			{   values[i].balance = values[i].balance + amount;
			    cout<<"\n\t"<<values[i].first_name<<", ₹ "<< amount << " has been deposited for account number "<<values[i].key<<endl; 
			    return 1;
			}
	else if (overflow)
		return overflow->deposit(key, amount);
    return 0;
}

int Bucket :: withdraw(int key, int amount){
	for(int i = 0; i < values.size(); i++)
		if (values[i].key == key)
			{   if(values[i].balance-amount>0)
			    {values[i].balance = values[i].balance - amount;
			    cout<<"\n\t"<<values[i].first_name<<", ₹ "<< amount << " has been withdrawn for account number "<<values[i].key<<endl;}
			    else
			    cout<<"\n\tInsufficient funds\n";
			    return 1;
			}
	else if (overflow)
		return overflow->withdraw(key, amount);
    return 0;
}

class Hashmap{
	int numrecords;
	int next;
	int hash (int n);
	void reinsert(int bucket_num);
	int numbits;
	int bucketsize;
	vector <Bucket *> buckets;
	public:
	Hashmap(int numbits, int bucketsize){
		this->numbits = numbits;
		this->bucketsize = bucketsize;
		next = 0;
		numrecords = 1 << numbits;
		for(int i = 0; i < numrecords; i++)
			buckets.push_back(new Bucket(bucketsize));
	}
	void insert(int key);
	void reinsert(vector <account> &temp);
	void del(int key);
	void search(int key);
	void display();
	void display_balance(int key);
	void store_into_files();
	void deposit(int key, int amount);
	void withdraw(int key, int amount);
	void modify(int key);
	bool authenticate_user(int acc_no, char* pin);
	bool find_key(int key);
};

int Hashmap :: hash(int n){
	return n&( (1 << numbits) - 1);
}

void Hashmap :: reinsert(vector <account> &temp){
	for(int i = 0; i < temp.size(); i++){
        int key = temp[i].key;
		int num = hash(key);
		tt=temp[i];
		buckets[num]->insert_back(key);
	
	}
}

void Hashmap :: insert(int key){
	int num = hash(key);
	//cout<<num<<endl;
	if (num >= buckets.size()){
		num = num - (1 << (numbits - 1));
	}
	buckets[num]->insert(key);
	if (!buckets[num]->isOverflow())
		return;
    buckets.push_back(new Bucket(bucketsize));
	numbits = ceil(log2((double)buckets.size()));
	
	vector <account> temp;
	buckets[next]->copy(temp);
	reinsert(temp);
	next++; 
	if (next == 1 << (numbits-1)){
		next = 0;
	}
}

void Hashmap :: display(){
	cout << "\tINDEX OF NEXT BUCKET TO BE SPLIT " << next << endl << "\n";
	for(int i = 0; i < buckets.size(); i++){
		cout << i << " ";
		buckets[i]->display();
	}
	return;
}

void Hashmap :: display_balance(int key){
		int num = hash(key);
	if (num < buckets.size()){
		int status = buckets[num]->display_balance(key);
		
	}
	else{
		num -= 1 << (numbits - 1);
		int status = buckets[num]->display_balance(key);
		
	}
}
void Hashmap :: store_into_files(){
	    for(int i = 0; i < buckets.size(); i++){
		buckets[i]->store_into_files(i);
	}
	return;
}
void Hashmap :: search(int key){
	int num = hash(key);
	if (num < buckets.size()){
		int status = buckets[num]->search(key);
		if (status)
			cout << key << " Found at bucket index " << num << endl;
		else
			cout << key << " Not found" << endl;
	}
	else{
		num -= 1 << (numbits - 1);
		int status = buckets[num]->search(key);
		if (status)
			cout << key << " Found at bucket index " << num << endl;
		else
			cout << key << " Not found" << endl;
	}
}

bool Hashmap :: find_key(int key){
	int num = hash(key);
	if (num < buckets.size()){
		int status = buckets[num]->find_key(key);
		if (status)
			return status;
	}
	else{
		num -= 1 << (numbits - 1);
		int status = buckets[num]->find_key(key);
		if (status)
			return status;
	}
}

bool Hashmap :: authenticate_user(int key, char* p){
	int num = hash(key);
	if (num < buckets.size()){
		int status = buckets[num]->authenticate_user(key, p);
		return status;
	}
	else{
		num -= 1 << (numbits - 1);
		int status = buckets[num]->authenticate_user(key, p);
		return status;
	}
}

void Hashmap :: modify(int key){
    int num = hash(key);
	if (num < buckets.size()){
		int status = buckets[num]->modify(key);
		if (status)
			cout << key << " Updation successful! " << endl;
		else
			cout << key << " Not found" << endl;
	}
	else{
		num -= 1 << (numbits - 1);
		int status = buckets[num]->modify(key);
		if (status)
			cout << key << " Updation successful! " << endl;
		else
			cout << key << " Not found" << endl;
	}
}

void Hashmap :: deposit(int key, int amount){
    int num = hash(key);
	if (num < buckets.size()){
		int status = buckets[num]->deposit(key, amount);
		if (status)
			cout << "\nStatus: transaction complete" << endl;
		else
			cout << "Incorrect key, please retry" << endl;
	}
	else{
		num -= 1 << (numbits - 1);
		int status = buckets[num]->deposit(key, amount);
		if (status)
			cout << "\nStatus: transaction complete" << endl;
		else
			cout << "Incorrect key, please retry" << endl;
	}
}

void Hashmap :: withdraw(int key, int amount){
    int num = hash(key);
	if (num < buckets.size()){
		int status = buckets[num]->withdraw(key, amount);
		if (status)
			cout << "Status: transaction complete " << endl;
		else
			cout << "Incorrect key, please retry" << endl;
	}
	else{
		num -= 1 << (numbits - 1);
		int status = buckets[num]->withdraw(key, amount);
		if (status)
			cout << "\n For " << key << ", Money has been withdrawn! " << endl;
		else
			cout << "Incorrect key, please retry" << endl;
	}
}

void Hashmap :: del(int key){
	num = hash(key);
	if (num < buckets.size()){
		int status = buckets[num]->del(key);
		if (status)
			{cout << key << " Deleted from bucket index " << num << endl;
			    	if(buckets[num]->isEmpty() == 1){
				    //buckets[num]->store_into_files(key);
				    fstream f1;
				    string file_no=to_string(num);
	                f1.open((file_no+".txt"),ios::out);
	                f1.close();
				}
			}
		else
			cout << key << " Not found" << endl;
	}
	else{
		num -= 1 << (numbits - 1);
		int status = buckets[num]->del(key);
		if (status)
			{cout << key << " Deleted from bucket index " << num << endl;
			    if(buckets[num]->isEmpty() == 1){
				    //buckets[num]->store_into_files(key);
				    fstream f1;
				    string file_no=to_string(num);
	                f1.open((file_no+".txt"),ios::out);
	                f1.close();}
			}
		else
			cout << key << " Not found" << endl;
	}
}

int main(){
    int numbits, bucket_size, key, amount;
    cout<<"\tDynamic Linear Hashing in a Bank Management System\n";
	cout<<"\n\tEnter the Numbits and Bucket size : ";
	cin >> numbits >> bucket_size;
	Hashmap h(numbits, bucket_size);
    for(;;)
	{
	    label:
	    cout<<"\n\n\t\t\t\t\t\t\t\tWelcome to The Bank";
        cout<<"\n\n\t\t\t\tPlease enter your option: 1.Register Account\t2.User LogIn\t3.Admin LogIn\t4.Exit\n\n";
        cout<<"\n\n\t\t\t\tYour Choice: ";
        int ch;
        cin>>ch;
        switch(ch)
        {
            case 1: 
                label2:
			    cout<<"\n\n\tEnter account number: "; 
			    cin >> key;
			    if(h.find_key(key)==false){
			    h.insert(key);
			    h.store_into_files();}
			    else
			        {cout<<"\n\tThis account number is taken!\n"; goto label2;}
                break;
    
            case 2:  int ch;
                int acc_no;
                char p[6];
                cout<<"\n\tEnter your account number: "; 
                cin>>acc_no;
                cout<<"\n\tEnter your pin: ";
                cin>>p;
                if(h.authenticate_user(acc_no, p)==true){
                key=acc_no;
                for(;;){
                cout<<"\n\tPlease enter your option number: \n\n\t 1: View Your Account Details\n\n\t 2: Deposit Money\n\n\t 3: Withdraw Money\n\n\t 4: Display Balance\n\n\t 5: Delete Account\n\n\t 6: Modify Account Details\n\n\t 7: Exit \n\n";
                cout<<"\tYour Choice: ";
                cin>>ch;
                switch(ch)
                {
                    case 1: 
                        cout<<"\n\n"; 
			            h.search(key);
                        break;
                    
                    case 2: 
			            cout<<"\n\n\tEnter amount to deposit: ";
			            cin >> amount;
			            h.deposit(key, amount);
			            h.store_into_files();
                        break;
                    
                    case 3: 
			            cout<<"\n\n\tEnter amount to withdraw: ";
			            cin >> amount;
			            h.withdraw(key, amount);
			            h.store_into_files();
                        break;
                    
                    case 4: 
                        cout<<"\n\n"; 
			            h.display_balance(key);
                        break;
                    
                    case 5: 
                        cout<<"\n\n"; 
			            h.del(key);
			            h.store_into_files();
                        break;
                        
                    case 6: 
                        cout<<"\n\n"; 
			            h.modify(key);
			            h.store_into_files();
                        break;
                        
                    case 7: goto label;
                            break;
                
                    default: cout<<"\n\tInvalid number, please retry\n";
                            
                        }}
                    break;
                }else{
                            cout<<"\n\tWrong account number or pin\n";
                            break;}
                        
                    
        
                case 3: int adminid, adminpin;
                    cout<<"\n\tPlease enter the Admin Identification Number: ";
                    cin>>adminid;
                    cout<<"\n\tPlease enter the pin: ";
                    cin>>adminpin;
                    if(adminid == admin_id && adminpin == admin_pin){
                        int choice;
                        cout<<"\n\t\t\t\tWelcome "<<admin_id<<"\n";
                        for(;;){
                        cout<<"\n\t\tPlease enter your option number: \n\n 1: View User accounts\n\n 2: Account deletion\n\n 3: Search by account number\n\n 4: Log out\n\n";
                        cin>>choice;
                        switch(choice)
                            {
                            case 1: 
                            h.display();
                             break;
            
                            case 2: 
                                cout<<"\n\n\tEnter the key: ";
			                    cin >> key;
			                    h.del(key);
			                    h.store_into_files();
                                break;
                            
                            case 3: 
                                cout<<"\n\n\tEnter the key: ";
			                    cin >> key; 
			                    h.search(key);
			                    break;

                            case 4: cout<<"\n\tYou will now exit admin mode\n";goto label;
                                break;
            
                            default:cout<<"\n\tInvalid Input"; 

                        }}
        
                    break;}
                    
                    else
                        {
                        cout<<"\n\tWrong Admin Name or Pin. Please retry later\n";
                        break;}
        
                case 4: exit(0);
        
                default: cout<<"\n\tInvalid Input"; 
}}}
